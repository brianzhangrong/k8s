apiVersion: extensions/v1beta1
kind: Deployment
metadata:  
  name: jobmanager
  namespace: big-data
  labels:
    app: jobmanager
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: jobmanager
    spec:
      containers:
      - name: jobmanager
        image:  flink
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort:  6123
        - containerPort:  8081
        args: ["jobmanager"]
        env:
        - name: JOB_MANAGER_RPC_ADDRESS
          value: jobmanager

---

apiVersion: v1
kind: Service
metadata:
  name: jobmanager
  namespace: big-data
  labels:
    app: jobmanager
spec:
  type: NodePort
  ports:
  - port: 8081
    targetPort: 8081
    protocol: TCP
    name: http
  - port: 6123
    targetPort: 6123
    protocol: TCP
    name: rpc
  - port: 6124
    targetPort: 6124
    protocol: TCP
    name: blob
  - port: 6125
    targetPort: 6125
    protocol: TCP
    name: query
  selector:
    app: jobmanager

---
# kind:apiVersion: extensions/v1beta1
# kind: Pod
# metadata:
#   name: jobmanager
#   namespace: big-data
#   labels:
#     app: jobmanager
# spec:
#   containers:
#   - name: jobmanager
#     image: <Image>
#     resources:
#       limits:
#         memory: "128Mi"
#         cpu: "500m"
#     ports:
#       - containerPort: <Port>

# ---

apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: jobmanager
  namespace: big-data
spec:
  rules:
  - host: flink.data.com
    http:
      paths:
      - backend:
          serviceName: jobmanager
          servicePort: 8081
        path: /

---

# apiVersion: extensions/v1beta1
# kind: Deployment
# metadata:  
#   name: taskmanager
#   namespace: big-data
#   labels:
#     app: taskmanager
# spec:
#   replicas: 5
#   template:
#     metadata:
#       labels:
#         app: taskmanager
#     spec:
#       containers:
#       - name: taskmanager
#         image:  flink
#         imagePullPolicy: IfNotPresent
#         ports:
#         - containerPort:  6121
#         - containerPort:  6122
#         args: ["taskmanager"]
#         env:
#         - name: JOB_MANAGER_RPC_ADDRESS
#           value: jobmanager
# ---
apiVersion: v1
kind: ReplicationController
metadata:
  name: taskmanager
  namespace : big-data
  
spec:
  replicas: 3
  selector:
    app: taskmanager
  # volumeClaimTemplates:
  # - metadata:
  #     name: input-file 
  #     annotations:
  #       volume.beta.kubernetes.io/storage-class: "managed-nfs-storage"
  #   spec:
  #     accessModes: [ "ReadWriteOnce" ]
  #     resources:
  #       requests:
  #         storage: 2Gi 
  template:
    metadata:
      name: taskmanager
      namespace : big-data
      labels:
        app: taskmanager
    spec:
      containers:
        - name: taskmanager
          image: flink
          imagePullPolicy : IfNotPresent
          ports:
            - containerPort: 6121
            - containerPort: 6122
          args: ["taskmanager"]
          env:
          - name: JOB_MANAGER_RPC_ADDRESS
            value: jobmanager
          volumeMounts:
          - name: input-file
            mountPath: "/mnt"
      volumes:
      - name: input-file
        persistentVolumeClaim:
          claimName: test-claim
          
---
apiVersion: v1
kind: Pod
metadata:
  name: taskmanager
  namespace : big-data
  labels:
    app: taskmanager
spec:
  containers:
  - name: taskmanager
    image: flink
    ports:
      - containerPort: 6121
      - containerPort: 6122
    args: ["taskmanager"]
    env:
    - name: JOB_MANAGER_RPC_ADDRESS
      value: jobmanager
    volumeMounts:
    - name: input-file
      mountPath: "/mnt"
  restartPolicy: Always
  volumes:
  - name: input-file
    persistentVolumeClaim:
        claimName: test-claim
---
kind: StorageClass
apiVersion: storage.k8s.io/v1
metadata:
  name: managed-nfs-storage
  namespace: big-data
provisioner: fuseim.pri/ifs
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: nfs-provisioner
  namespace: big-data
---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
   name: nfs-provisioner-runner
   namespace: big-data
rules:
   -  apiGroups: [""]
      resources: ["persistentvolumes"]
      verbs: ["get", "list", "watch", "create", "delete"]
   -  apiGroups: [""]
      resources: ["persistentvolumeclaims"]
      verbs: ["get", "list", "watch", "update"]
   -  apiGroups: ["storage.k8s.io"]
      resources: ["storageclasses"]
      verbs: ["get", "list", "watch"]
   -  apiGroups: [""]
      resources: ["events"]
      verbs: ["watch", "create", "update", "patch"]
   -  apiGroups: [""]
      resources: ["services", "endpoints"]
      verbs: ["get","create","list", "watch","update"]
   -  apiGroups: ["extensions"]
      resources: ["podsecuritypolicies"]
      resourceNames: ["nfs-provisioner"]
      verbs: ["use"]
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: run-nfs-provisioner
  namespace: big-data
subjects:
  - kind: ServiceAccount
    name: nfs-provisioner
    namespace: big-data
roleRef:
  kind: ClusterRole
  name: nfs-provisioner-runner
  apiGroup: rbac.authorization.k8s.io
---
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: test-claim
  namespace: big-data
  annotations:
    volume.beta.kubernetes.io/storage-class: "managed-nfs-storage"
spec:
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 20Mi
---
kind: Deployment
apiVersion: extensions/v1beta1
metadata:
  name: nfs-client-provisioner
spec:
  replicas: 1
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: nfs-client-provisioner
    spec:
      serviceAccount: nfs-provisioner
      containers:
        - name: nfs-client-provisioner
          image: registry.cn-hangzhou.aliyuncs.com/open-ali/nfs-client-provisioner
          volumeMounts:
            - name: nfs-client-root
              mountPath: /persistentvolumes
          env:
            - name: PROVISIONER_NAME
              value: fuseim.pri/ifs
            - name: NFS_SERVER
              value: 192.168.2.156
            - name: NFS_PATH
              value: /home/nfs
      volumes:
        - name: nfs-client-root
          nfs:
            server: 192.168.2.156
            path: /home/nfs
---


